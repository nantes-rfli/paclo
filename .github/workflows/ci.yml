name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Temurin JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      # Clojure CLI + linters (clojure-lsp はここでは入れない)
      - name: Set up Clojure ecosystem
        uses: DeLaGuardo/setup-clojure@13.0
        with:
          # Clojure CLI (tools.deps)
          cli: '1.11.3.1453'
          # pin to avoid 403 on "latest"
          clj-kondo: '2024.05.24'
          cljfmt: '0.13.0'

      - name: Cache Clojure deps
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2
            ~/.gitlibs
            ~/.clojure
          key: cljdeps-${{ runner.os }}-${{ hashFiles('**/deps.edn') }}
          restore-keys: |
            cljdeps-${{ runner.os }}-

      - name: Compile Java (jnr-ffi bindings)
        shell: bash
        run: |
          set -e
          # Prefer tools.build; fallback to direct javac with deps classpath
          clojure -T:build jar || \
          (mkdir -p target/classes && javac -cp "$(clojure -Spath)" -d target/classes $(find src-java -name "*.java"))

      - name: Run unit tests
        run: clojure -M:test

      - name: Lint / Format (prefer clojure-lsp, fallback to cljfmt)
        shell: bash
        run: |
          set -e
          if command -v clojure-lsp >/dev/null 2>&1; then
            clojure-lsp format --dry
          else
            echo "clojure-lsp not found; falling back to cljfmt check"
            cljfmt check
          fi
