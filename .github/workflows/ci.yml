name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Temurin JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      # --- Install Clojure CLI via official script (robust) ---
      - name: Install Clojure CLI
        shell: bash
        run: |
          set -e
          curl -sSL -o clj.sh https://download.clojure.org/install/linux-install-1.11.1.1435.sh
          chmod +x clj.sh
          sudo ./clj.sh
          clojure -Sdescribe

      - name: Cache Clojure deps
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2
            ~/.gitlibs
            ~/.clojure
          key: cljdeps-${{ runner.os }}-${{ hashFiles('**/deps.edn') }}
          restore-keys: |
            cljdeps-${{ runner.os }}-

      - name: Compile Java (jnr-ffi bindings)
        shell: bash
        run: |
          set -e
          # Prefer tools.build; fallback to direct javac with deps classpath
          clojure -T:build jar || \
          (mkdir -p target/classes && javac -cp "$(clojure -Spath)" -d target/classes $(find src-java -name "*.java"))

      - name: Run unit tests
        run: clojure -M:test

      # --- Format check without external binaries (avoid 403) ---
      - name: Lint / Format (cljfmt via deps)
        run: clojure -Sdeps '{:deps {cljfmt/cljfmt {:mvn/version "0.13.0"}}}' -M -m cljfmt.main check
